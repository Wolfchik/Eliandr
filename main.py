import asyncio
import sqlite3 
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.filters.command import Command

bot = Bot(token="7760313088:AAGFLFWSTk8zjWBBxWtlTxkGT5qTxOdUW0g")
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: types.Message):
    time_on = datetime.now().strftime("%H:%M")
    await message.answer(f"""
–ü—Ä–∏–≤–µ—Ç! –ú–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
¬∑ –Ø —Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞(—Å–∫–æ—Ä–æ)
¬∑ –ú—É—Ç–∏—Ç—å (—Å–∫–æ—Ä–æ)
¬∑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å–∫–æ—Ä–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å)
¬∑ –£–º–µ—é –∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ–≤–∞ (—Å–∫–æ—Ä–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å)
¬∑ –ò –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ(–º–æ–∂–µ—Ç –±—ã—Ç—å)
""")
    await message.answer("–£ –º–µ–Ω—è —á—Ç–æ... –î—è–¥—è –Ω–∞ —Å—Ç–µ–Ω–µ? üò®")

@dp.message(Command("time"))
async def say_tm(message: types.Message):
    time_on = datetime.now().strftime("%H:%M:%S, %d.%m.%Y")
    await message.reply(time_on)

@dp.message()
async def on_message(message: types.Message):
    text = message.text.lower()
    today = datetime.today().date()
    last_msg_date = ""
    with sqlite3.connect("data.db") as db:
        cur = db.cursor()
        for date in cur.execute("SELECT date FROM last_msg"):
            date = date[0]
            last_msg_date = date
    today = str(today)
    last_msg_date = str(last_msg_date)
    if today != last_msg_date:
        print("IF is continued")
        now = datetime.today()
        new_year = datetime(2025,1,1)
        data = new_year - now
        days = data.days
        minutes, seconds = divmod(data.seconds, 60)
        hours, minutes = divmod(minutes, 60)
        await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–µ—Ä–≤—ã–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è! –ö—Å—Ç–∞—Ç–∏, –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ {} –¥–Ω–µ–π, {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç.".format(days, hours, minutes))
        with sqlite3.connect("data.db") as db:
            db.cursor().execute("UPDATE last_msg SET date = ?", (today, ))
    if text in ["–∫–æ–≥–¥–∞ –Ω–≥?","—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞?","—Å–∫–æ–∫ –¥–æ –Ω–≥?","—Å–∫–æ–∫ –¥–Ω–µ–π –¥–æ –Ω–≥?","—Å–∫–æ–∫ –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞?","—Å–∫–æ—Ä–æ –Ω–≥?"]:
        now = datetime.today()
        new_year = datetime(2025,1,1)
        data = new_year - now
        days = data.days
        minutes, seconds = divmod(data.seconds, 60)
        hours, minutes = divmod(minutes, 60)
        await message.reply("–î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ {} –¥–Ω–µ–π, {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç".format(days, hours, minutes))

async def ini():
    print("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(ini())